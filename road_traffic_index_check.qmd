---
title: "Sjekk av vegtrafikkindeks"
format: 
  html:
    css: svv.css
    number-sections: true
    toc: true
    toc-location: left
    toc-title: "Innhold"
    toc-expand: true
    df-print: paged
    self-contained: true
crossref:
  fig-title: Figur
  tbl-title: Tabell
  title-delim: .
  fig-prefix: figur
  tbl-prefix: tabell
editor: source
knitr: 
  opts_chunk: 
    echo: false
---

```{r notes}
# Ekskluder:
# Skadalen 1-8
# Skjønhaug v 1-8
# Granfosstunnelene 7-10

# Reberegn:

```

```{r}
#| label: setup
#| include: false
#| echo: false
#| warning: false
#| message: false
  
# Packages are loaded through sourcing rmd_setup.R
source("rmd_setup.R")

# Traffic Data API calls to get points metadata and aadt
source("get_from_trafficdata_api.R")
source("split_road_system_reference.R")
source("road_events_functions.R")
source("traffic_link_functions.R")
library(DT)
library(htmltools)
library(sf)

index_year <- 2024
# Last published month
index_month <- 7

index_id <- 962

new_month_name <-
  lubridate::as_date(paste(index_year, index_month + 1, "01", sep = "-")) |> 
  lubridate::month(label = TRUE, abbr = FALSE) |> 
  stringr::str_to_title()

# new_month_name_2 <-
#   lubridate::as_date(paste(index_year, index_month + 2, "01", sep = "-")) |> 
#   lubridate::month(label = TRUE, abbr = FALSE) |> 
#   stringr::str_to_title()

# new_month_name_3 <-
#   lubridate::as_date(paste(index_year, index_month + 3, "01", sep = "-")) |> 
#   lubridate::month(label = TRUE, abbr = FALSE) |> 
#   stringr::str_to_title()

# run once per session
#source("road_traffic_index_check_dataprep.R")

road_traffic_index <- readr::read_rds("road_traffic_index_latest.rds")
pointindex <- readr::read_rds("road_traffic_pointindex_latest.rds")
points <- readr::read_rds("trps.rds")
counties <- readr::read_rds("counties.rds")
  
road_traffic_trps <- pointindex[[1]]
pointindices <- pointindex[[2]]

events <- readr::read_rds("events/events.rds")

# Traffic links from Adm ----
links <-
  sf::st_read("C:/Users/snohan/Desktop/traffic_links_2023_2024-08-06.geojson") |>
  dplyr::select(
    id,
    countyIds,
    associatedTrpIds
  )
```


```{r}
#| label: filter_for_county

# Look at details in one county at a time

# 31 Østfold                08 Trond
# 32 Akershus               08 Trond
# 33 Buskerud               08 Trond
#  3 Oslo                   08 Trond
# 34 Innlandet              08 Snorre
# 39 Vestfold               08 Trond
# 40 Telemark               08 Trond
# 42 Agder                  08 Trond
# 11 Rogaland               08 Trond
# 46 Vestland               08 Trond
# 15 Møre og Romsdal        08 Trond
# 50 Trøndelag              08 Snorre
# 18 Nordland               08 Trond
# 55 Troms                  08 Trond
# 56 Finnmark               08 Trond

county_number_chosen <- 56

trps_meta <- 
  points %>% 
  dplyr::filter(
    trp_id %in% road_traffic_trps#$trp_id
  ) %>% 
  # dplyr::left_join(
  #   pointindices, 
  #   by = "trp_id"
  # ) %>%
  dplyr::distinct(trp_id, .keep_all = TRUE) %>% 
  split_road_system_reference() %>% 
  dplyr::select(
    trp_id, 
    name, 
    road_reference, 
    road_category_and_number, 
    county_no,
    county_name, 
    municipality_name, 
    lat, lon
  ) %>% 
  dplyr::filter(
    county_no == county_number_chosen
  )


## AADT ----
adt <- get_aadt_by_length_for_trp_list(trps_meta$trp_id)

adt_filtered <- adt %>%
  dplyr::filter(length_range == "[..,5.6)") %>%
  dplyr::group_by(trp_id) %>%
  dplyr::filter(year == max(year)) %>%
  dplyr::select(trp_id, adt = aadt_total)

county_name_chosen <- counties %>% 
  dplyr::filter(county_number == county_number_chosen) 

county_name_chosen_here <- county_name_chosen$county_name[1]


## New month's pointindices ----
point_index_new <- 
  get_pointindices_for_trp_list(
    trps_meta$trp_id, 
    index_year
  )


# Traffic links from Adm ----
# link_ids_in_county <-
#   links |> 
#   sf::st_drop_geometry() |> 
#   dplyr::select(
#     id,
#     countyIds
#   ) |> 
#   tidyr::unnest(countyIds) |> 
#   dplyr::filter(
#     countyIds == county_number_chosen
#   ) |> 
#   dplyr::distinct()
# 
# links_in_county <-
#   links |> 
#   dplyr::filter(
#     id %in% link_ids_in_county$id
#   )
# 
# links_with_trp <-
#   links |> 
#   sf::st_drop_geometry() |> 
#   dplyr::select(
#     id,
#     associatedTrpIds
#   ) |> 
#   tidyr::unnest(associatedTrpIds) |> 
#   dplyr::filter(
#     associatedTrpIds %in% trps_meta$trp_id
#   ) |> 
#   dplyr::distinct() |> 
#   dplyr::rename(
#     this_county_trp = associatedTrpIds
#   )
```


```{r}
#| label: data_prep

road_traffic_index_prepared <- 
  road_traffic_index %>% 
  dplyr::filter(
    period == "month",
    area_type == "COUNTY"
  ) %>% 
  dplyr::mutate(
    length_range = 
      dplyr::case_when(
        length_range == "[..,..)" ~ "alle",
        length_range == "[..,5.6)" ~ "lette",
        length_range == "[5.6,..)" ~ "tunge"
      )
  ) %>% 
  dplyr::mutate(
    road_category = 
      dplyr::case_when(
        road_category == "EUROPAVEG_RIKSVEG_FYLKESVEG" ~ "Europa-, riks- og fylkesveg",
        road_category == "EUROPAVEG_RIKSVEG" ~ "Europa-, riksveg",
        road_category == "FYLKESVEG" ~ "Fylkesveg"
        )
  ) %>% 
  dplyr::mutate(
    month_object = lubridate::make_date(year = year, month = month),
    month_name = lubridate::month(month_object, label = TRUE, abbr = FALSE)
  )

pointindex_prepared <- 
  pointindices %>%
  dplyr::filter(day_type == "ALL",
                period == "month",
                is_excluded == FALSE,
                is_manually_excluded == FALSE,
                trp_id %in% trps_meta$trp_id
                ) %>%
  dplyr::select(trp_id, year, month, index_total_p,
                index_total_coverage, length_excluded, length_coverage,
                index_short, index_long)

point_index_new_prepared_1 <- 
  point_index_new %>%
  dplyr::filter(day_type == "ALL",
                period == "month",
                month == index_month + 1) %>%
  dplyr::select(trp_id, year, month, index_total_p,
                index_total_coverage, length_excluded, length_coverage,
                index_short, index_long)

# point_index_new_prepared_2 <-
#   point_index_new %>%
#   dplyr::filter(day_type == "ALL",
#                 period == "month",
#                 month == index_month + 2) %>%
#   dplyr::select(trp_id, year, month, index_total_p,
#                 index_total_coverage, length_excluded, length_coverage,
#                 index_short, index_long)

# point_index_new_prepared_3 <-
#   point_index_new %>%
#   dplyr::filter(day_type == "ALL",
#                 period == "month",
#                 month == index_month + 3) %>%
#   dplyr::select(trp_id, year, month, index_total_p,
#                 index_total_coverage, length_excluded, length_coverage,
#                 index_short, index_long)

# point_index_new_prepared_4 <- 
#   point_index_new %>%
#   dplyr::filter(day_type == "ALL",
#                 period == "month",
#                 month == index_month + 4) %>%
#   dplyr::select(trp_id, year, month, index_total_p,
#                 index_total_coverage, length_excluded, length_coverage,
#                 index_short, index_long)

# When using CSV we do not need new pointindex from api
pointindex_prepared_all <- 
  dplyr::bind_rows(
    pointindex_prepared,
    point_index_new_prepared_1,
    #point_index_new_prepared_2,
    #point_index_new_prepared_3,
    #point_index_new_prepared_4
    ) %>% 
  dplyr::left_join(
    trps_meta, by = "trp_id"
    ) %>% 
  dplyr::left_join(
    adt_filtered, by = "trp_id"
    ) %>% 
  dplyr::mutate(
    short_is_least = index_short < index_long,
    short_is_least_check = index_total_p >= index_short & index_total_p <= index_long,
    long_is_least_check = index_total_p >= index_long & index_total_p <= index_short,
    #short_is_least_check = dplyr::between(index_total_p, index_short, index_long),
    #long_is_least_check = dplyr::between(index_total_p, index_long, index_short),
    total_short_long_check = dplyr::case_when(
      short_is_least & short_is_least_check ~ 0, #"ok",
      short_is_least & !short_is_least_check ~ 1, #"not ok",
      !short_is_least & long_is_least_check ~ 0, #"ok",
      !short_is_least & !long_is_least_check ~ 1, #"not ok",
      ),
    diff_total_short = round(index_short - index_total_p, digits = 1),
    index_total_p = round(index_total_p, digits = 1),
    index_short = round(index_short, digits = 1),
    index_long = round(index_long, digits = 1),
    index_total_coverage = round(index_total_coverage, digits = 0),
    length_coverage = round(length_coverage, digits = 0))
     
trps_new_pointindex_1 <- 
  trps_meta %>% 
  dplyr::inner_join(
    point_index_new_prepared_1, 
    by = "trp_id"
  ) %>% 
  dplyr::mutate(
    label_text = 
      paste(name, ", ",
            road_category_and_number, "<br/>",
            index_total_p, " %", "<br/>",
            index_total_coverage, " %"),
    label_text = lapply(label_text, htmltools::HTML))

# trps_new_pointindex_2 <-
#   trps_meta %>%
#   dplyr::inner_join(
#     point_index_new_prepared_2,
#     by = "trp_id"
#   ) %>%
#   dplyr::mutate(
#     label_text =
#       paste(name, ", ",
#             road_category_and_number, "<br/>",
#             index_total_p, " %", "<br/>",
#             index_total_coverage, " %"),
#     label_text = lapply(label_text, htmltools::HTML)
#   )

# trps_new_pointindex_3 <-
#   trps_meta %>%
#   dplyr::inner_join(
#     point_index_new_prepared_3, by = "trp_id"
#   ) %>%
#   dplyr::mutate(
#     label_text =
#       paste(name, ", ",
#             road_category_and_number, "<br/>",
#             index_total_p, " %", "<br/>",
#             index_total_coverage, " %"),
#     label_text = lapply(label_text, htmltools::HTML))

# trps_new_pointindex_4 <- 
#   trps_meta %>%
#   dplyr::inner_join(
#     point_index_new_prepared_4, by = "trp_id"
#   ) %>% 
#   dplyr::mutate(
#     label_text = 
#       paste(name, ", ",
#             road_category_and_number, "<br/>",
#             index_total_p, " %", "<br/>",
#             index_total_coverage, " %"),
#     label_text = lapply(label_text, htmltools::HTML))

# Widening for table view
pointindex_prepared_all_wide_total_index <- 
  pointindex_prepared_all %>% 
  dplyr::select(name, road_reference, adt, month, index_total_p) %>% 
  tidyr::pivot_wider(names_from = month, values_from = index_total_p,
                     names_prefix = "m") %>% 
  dplyr::mutate(value_type = "index_total_p")

pointindex_prepared_all_wide_coverage <- 
  pointindex_prepared_all %>% 
  dplyr::select(name, road_reference, adt, month, index_total_coverage) %>% 
  tidyr::pivot_wider(names_from = month, values_from = index_total_coverage,
                     names_prefix = "m") %>% 
  dplyr::mutate(value_type = "index_total_coverage")

pointindex_prepared_all_wide_length_coverage <- 
  pointindex_prepared_all %>% 
  dplyr::select(name, road_reference, adt, month, length_coverage) %>% 
  tidyr::pivot_wider(names_from = month, values_from = length_coverage,
                     names_prefix = "m") %>% 
  dplyr::mutate(value_type = "length_coverage")

pointindex_prepared_all_wide_short <- 
  pointindex_prepared_all %>% 
  dplyr::select(name, road_reference, adt, month, index_short) %>% 
  tidyr::pivot_wider(names_from = month, values_from = index_short,
                     names_prefix = "m") %>% 
  dplyr::mutate(value_type = "index_short")

pointindex_prepared_all_wide_long <- 
  pointindex_prepared_all %>% 
  dplyr::select(name, road_reference, adt, month, index_long) %>% 
  tidyr::pivot_wider(names_from = month, values_from = index_long,
                     names_prefix = "m") %>% 
  dplyr::mutate(value_type = "index_long")

pointindex_prepared_all_wide_check <- 
  pointindex_prepared_all %>% 
  dplyr::select(name, road_reference, adt, month, total_short_long_check) %>% 
  tidyr::pivot_wider(names_from = month, values_from = total_short_long_check,
                     names_prefix = "m") %>% 
  dplyr::mutate(value_type = "total_short_long_check")

pointindex_prepared_all_wide_diff <- 
  pointindex_prepared_all %>% 
  dplyr::select(name, road_reference, adt, month, diff_total_short) %>% 
  tidyr::pivot_wider(names_from = month, values_from = diff_total_short,
                     names_prefix = "m") %>% 
  dplyr::mutate(value_type = "diff_total_short")

pointindex_wide <- 
  dplyr::bind_rows(
    pointindex_prepared_all_wide_total_index,
    pointindex_prepared_all_wide_coverage,
    pointindex_prepared_all_wide_length_coverage,
    pointindex_prepared_all_wide_short,
    pointindex_prepared_all_wide_long,
    pointindex_prepared_all_wide_check,
    pointindex_prepared_all_wide_diff
  ) %>% 
  split_road_system_reference() %>% 
  dplyr::select(
    name, 
    road = road_category_and_number,
    adt:value_type
  )
  #dplyr::arrange(road_reference)

# Longing for plot
pointindex_long <- 
  pointindex_prepared_all %>% 
  dplyr::select(
    trp_id:road_category_and_number
  )

pointindex_long_total <- 
  pointindex_long %>% 
  dplyr::select(
    trp_id, 
    year, 
    month, 
    index = index_total_p, 
    coverage = index_total_coverage,
    length_excluded, 
    name, 
    road_reference, 
    road_category_and_number
  ) %>% 
  dplyr::mutate(length_range = "total")

pointindex_long_short <- 
  pointindex_long %>% 
  dplyr::select(
    trp_id, 
    year, 
    month, 
    index_short, 
    index_long, 
    coverage = length_coverage, 
    length_excluded, 
    name, 
    road_reference, 
    road_category_and_number
  ) %>% 
  tidyr::pivot_longer(
    cols = c("index_short", "index_long"), 
    names_to = "length_range",
    values_to = "index"
  )

pointindex_long_2 <- 
  dplyr::bind_rows(
    pointindex_long_total,
    pointindex_long_short
  ) %>% 
  dplyr::mutate(
    length_range = 
      dplyr::case_when(
        length_range == "total" ~ "alle",
        length_range == "index_short" ~ "lette",
        length_range == "index_long" ~ "tunge")
  ) %>% 
  dplyr::mutate(
    month_object = lubridate::make_date(year = year, month = month),
    month_name = lubridate::month(month_object, label = TRUE, abbr = FALSE)
  )

# Links
links_in_county <- filter_traffic_links_by_county(county_number_chosen)
links_with_trp <- filter_links_with_trp_no_toll()

links_with_events_and_pointindex_1 <- join_events_and_trp_index_with_links(index_month, point_index_new_prepared_1)
#links_with_events_and_pointindex_2 <- join_events_and_trp_index_with_links(7, point_index_new_prepared_2)
```


# Vegtrafikkindeks for `r county_name_chosen_here`

## `r new_month_name`

```{r}
#| label: map_linkindex_and_events
#| message: false

links_with_events_and_pointindex_1 |> 
  map_pointindex_and_events()
```




```{r}
#| label: map_linkindex_and_events_2
#| message: false

## `r new_month_name_2`

#links_with_events_and_pointindex_2 |> 
#  map_pointindex_and_events()
```


```{r}
#| label: map_trp_index_3
#| message: false

## `r new_month_name_3`

# trps_new_pointindex_3 %>% 
#   dplyr::rename(index = index_total_p) %>% 
#   create_pointindex_map()
```


### Kurver per punkt for totaltrafikk

```{r}
#| label: pointindex_sparkline

pointindex_plot <- 
  pointindex_prepared_all %>%
  ggplot2::ggplot(aes(x = month, y = index_total_p, color = name)) +
  geom_line() +
  scale_x_discrete(breaks = seq(1, index_month + 1, 1)) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.background = element_rect(fill = svv_background_color),
    panel.background = element_rect(fill = svv_background_color)
  )

pointindex_plot %>% plotly::ggplotly()
```


### Kurver per punkt for lette biler

```{r}
#| label: pointindex_sparkline_light

pointindex_plot <- 
  pointindex_prepared_all %>%
  ggplot2::ggplot(aes(x = month, y = index_short, color = name)) +
  geom_line() +
  scale_x_discrete(breaks = seq(1, index_month + 1, 1)) +
  theme_minimal() +
  theme(legend.position = "bottom",
    plot.background = element_rect(fill = svv_background_color),
    panel.background = element_rect(fill = svv_background_color)
  )

pointindex_plot %>% plotly::ggplotly()
```


### Kurver per punkt for tunge biler

```{r}
#| label: pointindex_sparkline_heavy

pointindex_plot <- 
  pointindex_prepared_all %>%
  ggplot2::ggplot(aes(x = month, y = index_long, color = name)) +
  geom_line() +
  scale_x_discrete(breaks = seq(1, index_month + 1, 1)) +
  theme_minimal() +
  theme(legend.position = "bottom",
    plot.background = element_rect(fill = svv_background_color),
    panel.background = element_rect(fill = svv_background_color)
  )

pointindex_plot %>% plotly::ggplotly()
```


## Spredning i punktindekser

```{r}
#| label: boxplot
#| fig-cap: "Punktindeksenes spredning."

pointindex_prepared_all |> 
  dplyr::filter(
    month > index_month
  ) |> 
  dplyr::mutate(
    month = factor(month)
  ) |> 
  ggplot(
    aes(
      month,
      index_total_p
    )
  ) +
  geom_boxplot() +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.background = element_rect(fill = svv_background_color),
    panel.background = element_rect(fill = svv_background_color)
  )
```

```{r}
#| label: histogram
#| fig-cap: "Punktindeksenes fordeling."

pointindex_prepared_all |> 
  dplyr::filter(
    month > index_month
  ) |> 
  dplyr::mutate(
    month = factor(month)
  ) |> 
  ggplot(
    aes(
      index_total_p
    )
  ) +
  geom_histogram() +
    facet_grid(
    month ~ .,
    scales = "free"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    plot.background = element_rect(fill = svv_background_color),
    panel.background = element_rect(fill = svv_background_color)
  )
```

## Månedlig tidsserie

```{r}
#| label: table_trp_consistency
#| tbl-cap: "Så langt i år."

pointindex_wide |> 
  DT::datatable(
    filter = "top",
    rownames = FALSE,
    options = list(
      dom = "Blfrtip",
      pageLength = 21,
      lengthMenu = c(21, 42, 63),
      autoWidth = TRUE)
  )
```