---
title: "Sjekk av døgntrafikk"
format: 
  html:
    css: svv.css
    number-sections: true
    toc: true
    toc-location: left
    toc-title: "Innhold"
    toc-expand: true
    df-print: kable
    self-contained: true
crossref:
  fig-title: Figur
  tbl-title: Tabell
  title-delim: .
  fig-prefix: figur
  tbl-prefix: tabell
editor: source
knitr: 
  opts_chunk: 
    echo: false
---


```{r}
#| label: setup
#| include: false
#| echo: false
#| warning: false
#| message: false
  
base::Sys.setlocale(locale = "nb.utf8")
svv_background_color <- "#F5F5F5"

library(rmarkdown)
library(lubridate)
library(DT)
library(htmltools)
library(timeDate)
library(leaflet)
library(plotly)

# Traffic Data API calls to get points metadata and aadt
source("get_from_trafficdata_api.R")
source("split_road_system_reference.R")
source("H:/Programmering/R/byindeks/leaflet_nvdb_map_setup.R")
source("calendar_functions.R")

boxplot_dt <- function(dt_df) {
  
  dt_plot <- 
    dt_df |> 
    ggplot2::ggplot(
      aes(
        x = lane,
        y = total_volume
      )
    ) +
    ggplot2::geom_boxplot() +
    theme_light() +
    theme(
      panel.grid.minor.x = element_blank(),
      legend.position = "bottom",
      legend.key = element_blank(),
      legend.background = element_rect(fill = svv_background_color),
      plot.background = element_rect(fill = svv_background_color),
      panel.background = element_rect(fill = svv_background_color)
    ) +
    labs(
      x = "Felt",
      y = "Trafikkmengde \n"
    )

  dt_plotly <- dt_plot |> plotly::ggplotly()
  
  return(dt_plotly)
}

boxplot_per_year <- function(dt_df) {
  
  dt_df |>
    ggplot(aes(year, total_volume)) +
    geom_boxplot() +
    theme_light() +
    theme(
      panel.grid.minor.x = element_blank(),
      legend.position = "bottom",
      legend.key = element_blank(),
      legend.background = element_rect(fill = svv_background_color),
      plot.background = element_rect(fill = svv_background_color),
      panel.background = element_rect(fill = svv_background_color)
    ) +
    facet_wrap(
      ~ lane,
      ncol = 1,
      labeller = label_both
    )
}
```

```{r}
#| label: input

# User specify TRP, month and years here!

# Choose TRP
trp_id <- "51809V443636"
month_number <- 7
years <- c(2022:2025)
```



```{r}
#| label: get_data

trp_meta_data <- 
  get_trp_metadata_by_list(trp_id) |> 
  dplyr::slice_max(validFrom) |> 
  dplyr::slice_tail(n = 1)

trp_name_and_road_ref <- paste0(trp_meta_data$name, ", ", trp_meta_data$road_reference)

trp_table <-
  trp_meta_data |> 
  dplyr::select(
    trp_id,
    name,
    from, to,
    traffic_type, 
    registration_frequency,
    operational_status,
    road_reference,
    county_name,
    municipality_name,
    lane_numbers,
    number_of_directions
  ) |> 
  dplyr::rowwise() |> 
  dplyr::mutate(
    lanes = purrr::reduce(lane_numbers, paste)
  ) |> 
  dplyr::ungroup() |> 
  dplyr::select(-lane_numbers) |> 
  dplyr::mutate(
    dplyr::across(
      everything(),
      ~ as.character(.)
    )
  ) |> 
  tidyr::pivot_longer(
    cols = tidyselect::everything(),
    names_to = "variable"
  )

month_name <- 
  lubridate::as_date(paste0(
    "2000-", 
    month_number,
    "-01"
    )
  ) |> 
  lubridate::month(label = TRUE, abbr = FALSE) |> 
  stringr::str_to_title()

from_dates <- 
  purrr::map_chr(
    years,
    ~ paste0(.x, "-", stringr::str_pad(month_number, 2, "left", "0"), "-01T00:00:00Z")
  )

dates <- 
  tibble::tibble(
    years,
    from_dates
  ) |> 
  dplyr::mutate(
    n_days = lubridate::days_in_month(from_dates),
    to_dates = 
      paste0(
        years, "-", 
        stringr::str_pad(month_number, 2, "left", "0"), 
        "-",
        n_days,
        "T00:00:00Z"
      )
  )

# Fetch daily traffic
dt <- 
  purrr::map2(
    .x = dates$from_dates,
    .y = dates$to_dates,
    .f = ~ get_daily_traffic_by_lane(trp_id, .x, .y)
  ) |> 
  purrr::list_rbind() |> 
  dplyr::filter(
    !is.na(total_volume)
  )
```


```{r}
#| label: day_types

moveable_holidays <-
  purrr::map(
    years,
    ~ find_moveable_holidays(.x)
  ) |> 
  purrr::reduce(c)
  
dt_with_day_classes <-
  dt |> 
  dplyr::mutate(
    from = lubridate::as_date(from),
    year = lubridate::year(from),
    weekday = lubridate::wday(from, week_start = 1),
    working_day = 
      dplyr::case_when(
        lubridate::wday(from, week_start = 1) > 5 ~ FALSE,
        lubridate::mday(from) == 1 & lubridate::month(from) == 1 ~ FALSE,
        lubridate::mday(from) == 1 & lubridate::month(from) == 5 ~ FALSE,
        lubridate::mday(from) == 17 & lubridate::month(from) == 5 ~ FALSE,
        lubridate::mday(from) %in% c(24, 25, 26, 31) & lubridate::month(from) == 12 ~ FALSE,
        from %in% moveable_holidays ~ FALSE,
        TRUE ~ TRUE
      )
  ) |> 
  dplyr::mutate(
    from = as.character(from),
    year = as.character(year)
  ) |> 
  dplyr::mutate(
    q25 = stats::quantile(total_volume, 0.25),
    median = stats::median(total_volume) |> round(),
    q75 = stats::quantile(total_volume, 0.75),
    iqr = stats::IQR(total_volume),
    .by = c(lane, working_day)
  ) |> 
  dplyr::mutate(
    outlier = 
      dplyr::case_when(
        total_volume < (q25 - 1.5 * iqr) ~ TRUE,
        total_volume > (q75 + 1.5 * iqr) ~ TRUE,
        TRUE ~ FALSE
      )
  )
```


## `r trp_name_and_road_ref`

```{r}
#| label: map

trp_meta_data |> 
  leaflet::leaflet(
     options =
        leafletOptions(
          crs = nvdb_crs,
          zoomControl = T
        )
  ) |> 
  leaflet::addTiles(
      urlTemplate = nvdb_map_url,
      attribution = nvdb_map_attribution
  ) |>
  leaflet::addCircleMarkers(
    lng = ~lon,
    lat = ~lat,
    radius = 6,
    stroke = T,
    weight = 2,
    color = "#008ec2",
    opacity = 0.8,
    fill = T,
    fillOpacity = 0.8
  )
```


## TRP metadata

```{r}
#| label: trp_table

trp_table

```


## Døgntrafikk yrkedøgn

```{r}
#| label: fig-dt_all

dt_with_day_classes |>
  dplyr::filter(
    working_day
  ) |> 
  boxplot_dt()

```

```{r}
#| label: fig-dt_per

dt_with_day_classes |>
  dplyr::filter(
    working_day
  ) |>
  boxplot_per_year()
```



## Døgntrafikk helgedøgn

```{r}
#| label: dt_non_working

dt_with_day_classes |>
  dplyr::filter(
    !working_day
  ) |> 
  boxplot_dt()
```

```{r}
#| label: fig-dt_per_n

dt_with_day_classes |>
  dplyr::filter(
    !working_day
  ) |>
  boxplot_per_year()
```


## Avvikende dager
```{r}
#| label: outliers

dt_with_day_classes |> 
  dplyr::filter(
    outlier
  ) |> 
  dplyr::select(
    from,
    lane,
    total_volume,
    median,
    weekday,
    working_day
  )
```